In Python, namespaces and variable scopes are fundamental concepts that dictate where and how variables and other identifiers are accessible within a program. The LEGB rule is a guideline that determines the order in which Python looks for names (identifiers) in different namespaces.

### Namespace:
A namespace is a container that holds a collection of identifiers (such as variables, functions, classes, etc.) and maps them to their corresponding objects. Each namespace is isolated from other namespaces to avoid name conflicts.

Python has several namespaces, including:
- **Local namespace**: Contains local variables and parameters in a function.
- **Enclosing namespace (non-local)**: Refers to the namespace of the enclosing function (for nested functions).
- **Global namespace**: Contains global variables and functions defined at the top level of a module or script.
- **Built-in namespace**: Contains built-in functions and exceptions provided by Python.

### Variable Scope:
The scope of a variable defines the region of the code where the variable is accessible. Variables have different scopes based on where they are defined. There are three primary variable scopes in Python:
- **Local scope**: Variables defined within a function.
- Enclosing scope (non-local): Variables defined in the enclosing function for nested functions.
- Global scope: Variables defined at the top level of a module or script.
- Built-in scope: Predefined variables and functions provided by Python.

### LEGB Rule:
The LEGB rule defines the order in which Python searches for names (identifiers) in different namespaces. It stands for:
- Local
- Enclosing
- Global
- Built-in

Python searches for a name in the following order:
1. **Local**: Python first looks for the name in the local namespace, i.e., within the current function.
2. **Enclosing**: If the name is not found in the local namespace, Python searches in the enclosing (non-local) namespaces, starting from the innermost to the outermost enclosing function.
3. **Global**: If the name is not found in the local or enclosing namespaces, Python searches in the global namespace.
4. **Built-in**: If the name is not found in any of the above namespaces, Python finally searches in the built-in namespace.

### Example:
```python
x = 'global'

def outer_func():
    x = 'enclosing'
    
    def inner_func():
        x = 'local'
        print(x)  # Looks for 'x' in local namespace

    inner_func()

outer_func()
print(x)  # Looks for 'x' in global namespace
```
