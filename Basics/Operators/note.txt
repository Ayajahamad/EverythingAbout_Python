---------------------------Everything About Operators------------------------------------

In Python, operators are special symbols or keywords that perform operations on one or more operands. Operators can be used for arithmetic, comparison, logical operations, assignment, membership testing, identity testing, and more. Here's a breakdown of the main categories of operators in Python:

1. **Arithmetic Operators**:
   - Addition (+)
   - Subtraction (-)
   - Multiplication (*)
   - Division (/)
   - Modulus (%)
   - Exponentiation (**)
   - Floor Division (//)

2. **Comparison Operators**:
   - Equal to (==)
   - Not equal to (!=)
   - Greater than (>)
   - Less than (<)
   - Greater than or equal to (>=)
   - Less than or equal to (<=)

3. **Logical Operators**:
   - Logical AND (and)
   - Logical OR (or)
   - Logical NOT (not)

4. **Assignment Operators**:
   - Assign (=)
   - Add and assign (+=)
   - Subtract and assign (-=)
   - Multiply and assign (*=)
   - Divide and assign (/=)
   - Modulus and assign (%=)
   - Exponentiate and assign (**=)
   - Floor divide and assign (//=)

5. **Bitwise Operators**:
   - Bitwise AND (&)
   - Bitwise OR (|)
   - Bitwise XOR (^)
   - Bitwise NOT (~)
   - Left shift (<<)
   - Right shift (>>)

6. **Membership Operators**:
   - `in`: Evaluates to True if it finds a variable in the specified sequence and False otherwise.
   - `not in`: Evaluates to True if it does not finds a variable in the specified sequence and False otherwise.

7. **Identity Operators**:
   - `is`: Returns True if both variables are the same object.
   - `is not`: Returns True if both variables are not the same object.

Here are some examples of how these operators are used in Python:

```python
# Arithmetic Operators
x = 10
y = 5
print(x + y)  # Addition
print(x - y)  # Subtraction
print(x * y)  # Multiplication
print(x / y)  # Division
print(x % y)  # Modulus
print(x ** y) # Exponentiation
print(x // y) # Floor Division

# Comparison Operators
print(x == y) # Equal to
print(x != y) # Not equal to
print(x > y)  # Greater than
print(x < y)  # Less than
print(x >= y) # Greater than or equal to
print(x <= y) # Less than or equal to

# Logical Operators
a = True
b = False
print(a and b) # Logical AND
print(a or b)  # Logical OR
print(not a)   # Logical NOT

# Assignment Operators
x += 1  # Add and assign
x -= 1  # Subtract and assign
x *= 2  # Multiply and assign
x /= 2  # Divide and assign
x %= 3  # Modulus and assign
x **= 2 # Exponentiate and assign
x //= 3 # Floor divide and assign

# Bitwise Operators
p = 60     # 60 = 0011 1100
q = 13     # 13 = 0000 1101
print(p & q)  # Bitwise AND
print(p | q)  # Bitwise OR
print(p ^ q)  # Bitwise XOR
print(~p)     # Bitwise NOT
print(p << 2) # Left shift
print(p >> 2) # Right shift

# Membership Operators
list = [1, 2, 3, 4, 5]
print(1 in list)   # True
print(6 not in list) # True

# Identity Operators
m = 20
n = 20
print(m is n)     # True
print(m is not n) # False
```

Understanding how these operators work is fundamental to writing effective Python code. Each type of operator has its own specific use cases and behaviors, and mastering them enables you to express complex operations concisely and effectively in your programs.