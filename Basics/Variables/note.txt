----------------------EVERYTHING ABOUT VARIABLES--------------

In Python, variables are used to store data values. Unlike some other programming languages, Python is dynamically typed, meaning you don't have to declare the type of a variable before assigning a value to it. Here's a breakdown of various aspects of variables in Python:

### 1. Variable Declaration and Assignment:
Variables in Python are declared by simply assigning a value to them using the assignment operator `=`. For example:

```python
x = 5
name = "John"
```

### 2. Variable Naming Rules:
- Variable names can contain letters (a-z, A-Z), digits (0-9), and underscores (_).
- Variable names cannot start with a digit and Special characters.
- Python is case-sensitive, so `name` and `Name` are different variables.
- Python keywords (reserved words) cannot be used as variable names.

### 3. Variable Types:
Python variables can hold values of different data types. Some common data types include:
- **int**: Integer values like 1, 2, -3, etc.
- **float**: Floating-point values like 3.14, 2.718, etc.
- **str**: String values like "hello", "python", etc.
- **bool**: Boolean values `True` and `False`.
- **list**: Ordered collection of items.
- **tuple**: Ordered collection of immutable items.
- **dict**: Unordered collection of key-value pairs.
- **set**: Unordered collection of unique items.

### 4. Dynamic Typing:
Python is dynamically typed, meaning you can reassign variables to different types. For example:
```python
x = 5  # x is an integer
x = "hello"  # x is now a string
```

### 5. Variable Scope:
Variables in Python have scope, which defines where they can be accessed or modified. The scope of a variable is determined by where it's defined:
- **Global Variables**: Defined outside of any function or class. They can be accessed from anywhere in the code.
- **Local Variables**: Defined within a function. They are accessible only within that function's scope.
- **Enclosing Variables**: Variables in the local scope of enclosing functions (for nested functions).
- **Nonlocal Variables**: Variables in the enclosing scope that are explicitly declared using the `nonlocal` keyword.

### 6. Variable Reassignment and Mutation:
Variables can be reassigned to different values, and the mutability of data structures like lists and dictionaries allows modifying their contents in place.

### Example:
```python
# Variable Declaration and Assignment
x = 5
name = "John"

# Variable Types
a = 10          # int
b = 3.14        # float
c = "hello"     # str
d = True        # bool
e = [1, 2, 3]   # list
f = (1, 2, 3)   # tuple
g = {'a': 1, 'b': 2}   # dict
h = {1, 2, 3}   # set

# Dynamic Typing
x = 5           # x is an integer
x = "hello"     # x is now a string

# Variable Scope
global_var = 10

def my_function():
    local_var = 20
    print(global_var)   # Accessing global variable

# Variable Reassignment and Mutation
my_list = [1, 2, 3]
my_list[0] = 10     # Mutation of list element
``` 
